# TODO: Test with different py versions using sub workflows
image: python:3.10

stages:
  - test
  - lint
  - bump
  - build
  - release


# workflow:
#   rules:
#     # Prevent running a push pipeline for a release commit that's not a tag
#     - if: $CI_COMMIT_MESSAGE =~ /^chore\(release\):.*$/ && $CI_COMMIT_TAG == null
#       when: never
#     - when: always


# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# Default cache values
default:
  cache: &global_cache
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .cache/pypoetry
      - .cache/pip
      - .venv/
    policy: pull-push


# Anchor to use pull only cache
.use_cached_venv: &use_cached_venv
  before_script:
    - source .venv/bin/activate
  cache:
    <<: *global_cache
    policy: pull


.only_tag: &only_tag
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_MESSAGE =~ /^chore\(release\): Release \d+\.\d+\.\d+$/'
      when: on_success
    - when: never


.no_tag: &no_tag
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success


.only_protected: &only_protected
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TAG == null
      when: on_success
    - when: never


# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  REPO_URL: "https://release-token:${RELEASE_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"


# Setup job to install dependencies
build-env:
  stage: .pre
  script:
    - python -m venv .venv/
    - source .venv/bin/activate
    - pip install -U pip
    - pip install poetry
    - poetry install
  rules:
      # If project dependencies were changed then run
    - changes:
      - pyproject.toml
      - manifest/
      when: always
      # If .venv exists then skip
    - exists:       
      - .venv/
      when: never
    # Default to manual, but continue
    # pipeline if not run
    - when: manual
      allow_failure: true


unit-tests:
  <<: *use_cached_venv
  <<: *no_tag
  stage: test
  script:
    - make test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml
    paths:
      - coverage-report/


lint:
  <<: *use_cached_venv
  <<: *no_tag
  stage: lint
  script:
    - make lint


bump-version:
  <<: *use_cached_venv
  <<: *only_protected
  stage: bump
  before_script:
      # Install semantic-release, not sure why it's not in the venv already
    - pip install python-semantic-release
      # Set git info
    - git config --global user.email "$GIT_EMAIL"
    - git config --global user.name "$GIT_USER"
    - git fetch $REPO_URL $CI_COMMIT_BRANCH
    - git reset --hard origin/$CI_COMMIT_BRANCH
      # Explicitly checkout branch since gitlab CI detaches
    - git checkout $CI_COMMIT_BRANCH
  script:
    # Bump the version with prerelease tag
    - export DID_BUMP=$(semantic-release version 2>&1)
    # Push new tag to trigger release workflow if bumped
    - echo $DID_BUMP
    - |
      if [[ $DID_BUMP == *"No release will be made."* ]]; then
        echo "Semantic release did not bump the version"
      else
        echo "Semantic release bumped the version"
        git push $REPO_URL $CI_COMMIT_BRANCH --tags
      fi


build-wheel:
  <<: *use_cached_venv
  <<: *only_tag
  stage: build
  script:
    # Build the wheel
    - poetry build --format wheel
  artifacts:
    name: dist
    paths:
      - dist/


get-release-info:
  <<: *use_cached_venv
  <<: *only_tag
  stage: release
  script:
    # Create release.env file with changelog
    - echo "CHANGELOG=$(semantic-release changelog)" >> release.env
    - echo "VERSION=$(poetry version --short)" >> release.env
  artifacts:
    reports:
      dotenv: release.env


make-release:
  <<: *use_cached_venv
  <<: *only_tag
  stage: release
  needs:
    - job: get-release-info
      artifacts: true
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Building release $VERSION"
  release:
    name: Release $VERSION
    tag_name: $VERSION
    description: $CHANGELOG


publish-wheel:
  <<: *use_cached_venv
  <<: *only_tag
  stage: release
  script: |
      # Publish the built wheel to the registry
      poetry config repositories.gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
      poetry config http-basic.gitlab gitlab-ci-token "$CI_JOB_TOKEN"
      poetry publish --repository gitlab